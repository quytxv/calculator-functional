{"version":3,"sources":["component/Display.js","component/Button.js","component/ButtonGroup.js","component/ButtonPanel.js","logic/operate.js","logic/calculate.js","logic/isNumber.js","component/App.js","index.js"],"names":["Display","value","className","Button","name","orange","wide","clickHandler","join","trim","onClick","ButtonGroup","groupName","buttonList","handleClick","key","Object","keys","map","buttonName","buttonPanelList","row1","row2","row3","row4","row5","ButtonPanel","groupKey","operate","numberOne","numberTwo","operation","one","big","two","plus","toString","minus","times","alert","div","Error","calculate","obj","total","next","test","result","includes","parseFloat","App","useState","setTotal","setNext","setOperation","newTotal","newNext","newOperation","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c48b138f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Display.css';\n\nconst Display = ({value}) => {\n    return (\n        <div className=\"component-display\">\n            <div>{value}</div>\n        </div>\n    );\n};\n\nDisplay.propTypes = {\n    value: PropTypes.string,\n};\n\nexport default Display;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nconst Button = ({name, orange, wide, clickHandler}) => {\n    const handleClick = () => {\n        clickHandler(name);\n    };\n\n    const className = [\n        'component-button',\n        orange ? 'orange' : '',\n        wide ? 'wide' : '',\n    ];\n\n    return (\n        <div className={className.join(' ').trim()}>\n            <button onClick={handleClick}>{name}</button>\n        </div>\n    );\n};\n\nButton.propTypes = {\n    name: PropTypes.string.isRequired,\n    orange: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nconst ButtonGroup = ({groupName, buttonList, clickHandler}) => {\n    const handleClick = (name) => {\n        clickHandler(name);\n    };\n\n    return (\n        <div key={groupName}>\n            {\n                Object.keys(buttonList).map((buttonName) => {\n                    const {orange = false, wide = false} = buttonList[buttonName];\n                    return <Button\n                        key={buttonName}\n                        name={buttonName}\n                        clickHandler={handleClick}\n                        orange={orange}\n                        wide={wide}\n                    />;\n                })\n            }\n        </div>\n    );\n};\n\nButtonGroup.propTypes = {\n    groupName: PropTypes.string.isRequired,\n    buttonList: PropTypes.object.isRequired,\n    clickHandler: PropTypes.func,\n};\n\nexport default ButtonGroup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonGroup from './ButtonGroup';\nimport './ButtonPanel.css';\n\nconst buttonPanelList = {\n    row1: {\n        'AC': {},\n        '+/-': {},\n        '%': {},\n        'รท': {orange: true},\n    },\n    row2: {\n        '7': {},\n        '8': {},\n        '9': {},\n        'x': {orange: true},\n    },\n    row3: {\n        '4': {},\n        '5': {},\n        '6': {},\n        '-': {orange: true},\n    },\n    row4: {\n        '1': {},\n        '2': {},\n        '3': {},\n        '+': {orange: true},\n    },\n    row5: {\n        '0': {wide: true},\n        '.': {},\n        '=': {orange: true},\n    },\n};\n\nconst ButtonPanel = ({clickHandler}) => {\n    const handleClick = (buttonName) => {\n        clickHandler(buttonName);\n    };\n\n    return (\n        <div className=\"component-button-panel\">\n            {\n                Object.keys(buttonPanelList).map((groupKey) => {\n                    const buttonList = buttonPanelList[groupKey];\n                    return <ButtonGroup\n                        key={groupKey}\n                        groupName={groupKey}\n                        buttonList={buttonList}\n                        clickHandler={handleClick}\n                    />;\n                })\n            }\n        </div>\n    );\n};\nButtonPanel.propTypes = {\n    clickHandler: PropTypes.func,\n};\n\nexport default ButtonPanel;\n","import big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n    const one = big(numberOne || '0');\n    const two = big(numberTwo || (operation === 'รท' || operation === 'x' ? '1': '0')); // If dividing or multiplying, then 1 maintains current value in cases of null\n    if (operation === '+') {\n        return one.plus(two).toString();\n    }\n    if (operation === '-') {\n        return one.minus(two).toString();\n    }\n    if (operation === 'x') {\n        return one.times(two).toString();\n    }\n    if (operation === 'รท') {\n        if (two === '0') {\n            alert('Divide by 0 error');\n            return '0';\n        } else {\n            return one.div(two).toString();\n        }\n    }\n    throw Error(`Unknown operation '${operation}'`);\n}\n","import big from 'big.js';\n\nimport operate from './operate';\nimport isNumber from './isNumber';\n\nexport default function calculate(obj, buttonName) {\n    if (buttonName === 'AC') {\n        return {\n            total: null,\n            next: null,\n            operation: null,\n        };\n    }\n\n    if (isNumber(buttonName)) {\n        if (buttonName === '0' && obj.next === '0') {\n            return {};\n        }\n        // If there is an operation, update next\n        if (obj.operation) {\n            if (obj.next) {\n                return {next: obj.next + buttonName};\n            }\n            return {next: buttonName};\n        }\n        // If there is no operation, update next and clear the value\n        if (obj.next) {\n            const next = obj.next === '0' ? buttonName : obj.next + buttonName;\n            return {\n                next,\n                total: null,\n            };\n        }\n        return {\n            next: buttonName,\n            total: null,\n        };\n    }\n\n    if (buttonName === '%') {\n        if (obj.operation && obj.next) {\n            const result = operate(obj.total, obj.next, obj.operation);\n            return {\n                total: big(result)\n                    .div(big('100'))\n                    .toString(),\n                next: null,\n                operation: null,\n            };\n        }\n        if (obj.next) {\n            return {\n                next: big(obj.next)\n                    .div(big('100'))\n                    .toString(),\n            };\n        }\n        return {};\n    }\n\n    if (buttonName === '.') {\n        if (obj.next) {\n            // ignore a . if the next number already has one\n            if (obj.next.includes('.')) {\n                return {};\n            }\n            return {next: obj.next + '.'};\n        }\n        return {next: '0.'};\n    }\n\n    if (buttonName === '=') {\n        if (obj.next && obj.operation) {\n            return {\n                total: operate(obj.total, obj.next, obj.operation),\n                next: null,\n                operation: null,\n            };\n        } else {\n            // '=' with no operation, nothing to do\n            return {};\n        }\n    }\n\n    if (buttonName === '+/-') {\n        if (obj.next) {\n            return {next: (-1 * parseFloat(obj.next)).toString()};\n        }\n        if (obj.total) {\n            return {total: (-1 * parseFloat(obj.total)).toString()};\n        }\n        return {};\n    }\n\n    // Button must be an operation\n\n    // When the user presses an operation button without having entered\n    // a number first, do nothing.\n    // if (!obj.next && !obj.total) {\n    //   return {};\n    // }\n\n    // User pressed an operation button and there is an existing operation\n    if (obj.operation) {\n        return {\n            total: operate(obj.total, obj.next, obj.operation),\n            next: null,\n            operation: buttonName,\n        };\n    }\n\n    // no operation yet, but the user typed one\n\n    // The user hasn't typed a number yet, just save the operation\n    if (!obj.next) {\n        return {operation: buttonName};\n    }\n\n    // save the operation and shift 'next' into 'total'\n    return {\n        total: obj.next,\n        next: null,\n        operation: buttonName,\n    };\n}\n","export default function isNumber(item) {\n    return /[0-9]+/.test(item);\n}\n","import React, {useState} from 'react';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\nimport calculate from '../logic/calculate';\nimport './App.css';\n\nconst App = () => {\n    const [total, setTotal] = useState(null);\n    const [next, setNext] = useState(null);\n    const [operation, setOperation] = useState(null);\n\n    const handleClick = (buttonName) => {\n        const {\n            total: newTotal = total,\n            next: newNext = next,\n            operation: newOperation = operation,\n        } = calculate({total, next, operation}, buttonName);\n        console.log(calculate({total, next, operation}, buttonName));\n        console.log(total, next, operation);\n        setTotal(newTotal);\n        setNext(newNext);\n        setOperation(newOperation);\n    };\n\n    return (\n        <div className=\"component-app\">\n            <Display value={next || total || '0'} />\n            <ButtonPanel clickHandler={handleClick} />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './component/App';\nimport './index.css';\nimport 'github-fork-ribbon-css/gh-fork-ribbon.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}